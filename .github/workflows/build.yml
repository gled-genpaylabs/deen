name: Build Deen Compiler

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release with the built binaries'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: deen-linux-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: deen-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: deen-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: deen-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-18-dev libclang-18-dev clang-18 libpolly-18-dev
        echo "LLVM_SYS_180_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV

    # macOS dependencies
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
          # For Apple Silicon, use brew
          brew install llvm@18 zstd libffi
          LLVM_PREFIX=$(brew --prefix llvm@18)
          echo "LLVM_SYS_180_PREFIX=$LLVM_PREFIX" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LLVM_PREFIX/lib:$(brew --prefix zstd)/lib:$(brew --prefix libffi)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LLVM_PREFIX/lib:$(brew --prefix zstd)/lib:$(brew --prefix libffi)/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$LLVM_PREFIX/lib/pkgconfig:$(brew --prefix zstd)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L$LLVM_PREFIX/lib" >> $GITHUB_ENV
        else
          # For x86_64 cross-compilation, download pre-built LLVM
          LLVM_VERSION="18.1.8"
          LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz"
          LLVM_DIR="$HOME/llvm-x86_64"
          
          echo "Downloading LLVM ${LLVM_VERSION} for x86_64..."
          curl -L "$LLVM_URL" -o llvm.tar.xz
          mkdir -p "$LLVM_DIR"
          tar -xf llvm.tar.xz -C "$LLVM_DIR" --strip-components=1
          
          echo "LLVM_SYS_180_PREFIX=$LLVM_DIR" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LLVM_DIR/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LLVM_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$LLVM_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L$LLVM_DIR/lib" >> $GITHUB_ENV
          
          # Verify installation
          ls -la "$LLVM_DIR"
          "$LLVM_DIR/bin/llvm-config" --version
        fi

    # Windows dependencies
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $llvmVersion = "18.1.8"
        $llvmUrl = "https://github.com/llvm/llvm-project/releases/download/llvmorg-$llvmVersion/LLVM-$llvmVersion-win64.exe"
        $llvmInstaller = "$env:TEMP\LLVM-$llvmVersion-win64.exe"
        $llvmPath = "C:\LLVM"
        
        Write-Host "Downloading LLVM $llvmVersion..."
        Invoke-WebRequest -Uri $llvmUrl -OutFile $llvmInstaller
        
        Write-Host "Installing LLVM to $llvmPath..."
        Start-Process -FilePath $llvmInstaller -ArgumentList "/S", "/D=$llvmPath" -Wait
        
        # Set environment variables
        echo "LLVM_SYS_180_PREFIX=$llvmPath" >> $env:GITHUB_ENV
        echo "LIBCLANG_PATH=$llvmPath\bin" >> $env:GITHUB_ENV
        echo "PATH=$llvmPath\bin;$env:PATH" >> $env:GITHUB_ENV
        
        # Verify installation
        if (Test-Path "$llvmPath\bin\llvm-config.exe") {
          Write-Host "LLVM installation verified"
          & "$llvmPath\bin\llvm-config.exe" --version
          Write-Host "LLVM installed to: $llvmPath"
          Get-ChildItem "$llvmPath" | Select-Object Name
        } else {
          Write-Host "LLVM installation failed - llvm-config.exe not found"
          Get-ChildItem "$llvmPath" -ErrorAction SilentlyContinue | Select-Object Name
          exit 1
        }

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/deen ${{ matrix.name }}
        chmod +x ${{ matrix.name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/deen.exe ${{ matrix.name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.create_release == 'true'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/deen-*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
